// Code generated by ogen, DO NOT EDIT.

package ovt

import (
	"github.com/go-faster/jx"
)

// The VirusTotal API follows the conventional HTTP response codes to indicate success or failure.
// Codes in the `2xx` range indicate success. Codes in the `4xx` range indicate an error in the
// request (e.g. a missing parameter, a resource was not found). Codes in the `5xx` range indicate an
// error in VirusTotal's servers and should be rare.
// Unsuccessful requests return additional information about the error in JSON format.
// Ref: #/components/schemas/Error
type Error struct {
	// * `BadRequestError` (400) - The API request is invalid or malformed. The message usually provides
	// details about why the request is not valid.
	// * `WrongCredentialsError` (401) - The provided API key is incorrect.
	// * `AuthenticationRequiredError` (401) - The operation requires an authenticated user. Verify that
	// you have provided your API key.
	// * `TooManyRequestsError` (429) - Too many requests.
	// * `ForbiddenError` (403) - You are not allowed to perform the requested operation.
	// * `NotFoundError` (404) - The requested resource was not found.
	// * `QuotaExceededError` (429) - You have exceeded one of your quotas (minute, daily or monthly).
	// Daily quotas are reset every day at 00:00 UTC.
	// You may have run out of disk space and/or number of files on your VirusTotal Monitor account.
	// * `UserNotActiveError` (401) - The user account is not active. Make sure you properly activated
	// your account by following the link sent to your email.
	// * `InvalidArgumentError` (400) - Some of the provided arguments are incorrect.
	// * `AlreadyExistsError` (409) - The resource already exists.
	// * `TransientError` (503) - Transient server error.  Retry might work.
	// * `UnselectiveContentQueryError` (400) - Content search query is not selective enough.
	// * `UnsupportedContentQueryError` (400) - Unsupported content search query.
	// * `NotAvailableYet` (400) - The resource is not available yet, but will become available later.
	// * `FailedDependencyError` (424) - The request depended on another request and that request failed.
	// * `DeadlineExceededError` (504) - The operation took too long to complete.
	Code    ErrorCode `json:"code"`
	Message string    `json:"message"`
}

// GetCode returns the value of Code.
func (s Error) GetCode() ErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val ErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// * `BadRequestError` (400) - The API request is invalid or malformed. The message usually provides
// details about why the request is not valid.
// * `WrongCredentialsError` (401) - The provided API key is incorrect.
// * `AuthenticationRequiredError` (401) - The operation requires an authenticated user. Verify that
// you have provided your API key.
// * `TooManyRequestsError` (429) - Too many requests.
// * `ForbiddenError` (403) - You are not allowed to perform the requested operation.
// * `NotFoundError` (404) - The requested resource was not found.
// * `QuotaExceededError` (429) - You have exceeded one of your quotas (minute, daily or monthly).
// Daily quotas are reset every day at 00:00 UTC.
// You may have run out of disk space and/or number of files on your VirusTotal Monitor account.
// * `UserNotActiveError` (401) - The user account is not active. Make sure you properly activated
// your account by following the link sent to your email.
// * `InvalidArgumentError` (400) - Some of the provided arguments are incorrect.
// * `AlreadyExistsError` (409) - The resource already exists.
// * `TransientError` (503) - Transient server error.  Retry might work.
// * `UnselectiveContentQueryError` (400) - Content search query is not selective enough.
// * `UnsupportedContentQueryError` (400) - Unsupported content search query.
// * `NotAvailableYet` (400) - The resource is not available yet, but will become available later.
// * `FailedDependencyError` (424) - The request depended on another request and that request failed.
// * `DeadlineExceededError` (504) - The operation took too long to complete.
type ErrorCode string

const (
	ErrorCodeBadRequestError              ErrorCode = "BadRequestError"
	ErrorCodeWrongCredentialsError        ErrorCode = "WrongCredentialsError"
	ErrorCodeAuthenticationRequiredError  ErrorCode = "AuthenticationRequiredError"
	ErrorCodeTooManyRequestsError         ErrorCode = "TooManyRequestsError"
	ErrorCodeForbiddenError               ErrorCode = "ForbiddenError"
	ErrorCodeNotFoundError                ErrorCode = "NotFoundError"
	ErrorCodeQuotaExceededError           ErrorCode = "QuotaExceededError"
	ErrorCodeUserNotActiveError           ErrorCode = "UserNotActiveError"
	ErrorCodeInvalidArgumentError         ErrorCode = "InvalidArgumentError"
	ErrorCodeAlreadyExistsError           ErrorCode = "AlreadyExistsError"
	ErrorCodeTransientError               ErrorCode = "TransientError"
	ErrorCodeUnselectiveContentQueryError ErrorCode = "UnselectiveContentQueryError"
	ErrorCodeUnsupportedContentQueryError ErrorCode = "UnsupportedContentQueryError"
	ErrorCodeNotAvailableYet              ErrorCode = "NotAvailableYet"
	ErrorCodeFailedDependencyError        ErrorCode = "FailedDependencyError"
	ErrorCodeDeadlineExceededError        ErrorCode = "DeadlineExceededError"
)

type FileInfoBadRequest struct {
	Error Error `json:"error"`
}

// GetError returns the value of Error.
func (s FileInfoBadRequest) GetError() Error {
	return s.Error
}

// SetError sets the value of Error.
func (s *FileInfoBadRequest) SetError(val Error) {
	s.Error = val
}

func (*FileInfoBadRequest) fileInfoRes() {}

type FileInfoOK struct {
	Data FileInfoOKData `json:"data"`
}

// GetData returns the value of Data.
func (s FileInfoOK) GetData() FileInfoOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *FileInfoOK) SetData(val FileInfoOKData) {
	s.Data = val
}

func (*FileInfoOK) fileInfoRes() {}

type FileInfoOKData struct {
	Attributes FileObject `json:"attributes"`
	// Object ID.
	ID            string                         `json:"id"`
	Links         FileInfoOKDataLinks            `json:"links"`
	Relationships OptFileInfoOKDataRelationships `json:"relationships"`
	// Object type.
	Type FileInfoOKDataType `json:"type"`
}

// GetAttributes returns the value of Attributes.
func (s FileInfoOKData) GetAttributes() FileObject {
	return s.Attributes
}

// GetID returns the value of ID.
func (s FileInfoOKData) GetID() string {
	return s.ID
}

// GetLinks returns the value of Links.
func (s FileInfoOKData) GetLinks() FileInfoOKDataLinks {
	return s.Links
}

// GetRelationships returns the value of Relationships.
func (s FileInfoOKData) GetRelationships() OptFileInfoOKDataRelationships {
	return s.Relationships
}

// GetType returns the value of Type.
func (s FileInfoOKData) GetType() FileInfoOKDataType {
	return s.Type
}

// SetAttributes sets the value of Attributes.
func (s *FileInfoOKData) SetAttributes(val FileObject) {
	s.Attributes = val
}

// SetID sets the value of ID.
func (s *FileInfoOKData) SetID(val string) {
	s.ID = val
}

// SetLinks sets the value of Links.
func (s *FileInfoOKData) SetLinks(val FileInfoOKDataLinks) {
	s.Links = val
}

// SetRelationships sets the value of Relationships.
func (s *FileInfoOKData) SetRelationships(val OptFileInfoOKDataRelationships) {
	s.Relationships = val
}

// SetType sets the value of Type.
func (s *FileInfoOKData) SetType(val FileInfoOKDataType) {
	s.Type = val
}

type FileInfoOKDataLinks struct {
	// Link to the object.
	Self            string `json:"self"`
	AdditionalProps FileInfoOKDataLinksAdditional
}

// GetSelf returns the value of Self.
func (s FileInfoOKDataLinks) GetSelf() string {
	return s.Self
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s FileInfoOKDataLinks) GetAdditionalProps() FileInfoOKDataLinksAdditional {
	return s.AdditionalProps
}

// SetSelf sets the value of Self.
func (s *FileInfoOKDataLinks) SetSelf(val string) {
	s.Self = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *FileInfoOKDataLinks) SetAdditionalProps(val FileInfoOKDataLinksAdditional) {
	s.AdditionalProps = val
}

type FileInfoOKDataLinksAdditional map[string]jx.Raw

func (s *FileInfoOKDataLinksAdditional) init() FileInfoOKDataLinksAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type FileInfoOKDataRelationships map[string]jx.Raw

func (s *FileInfoOKDataRelationships) init() FileInfoOKDataRelationships {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Object type.
type FileInfoOKDataType string

const (
	FileInfoOKDataTypeFile FileInfoOKDataType = "file"
)

// Files are one of the most important type of objects in the VirusTotal API. We have a huge dataset
// of more than 2 billion files that have been analysed by VirusTotal over the years. A file object
// can be obtained either by [uploading a new file](ref:files-scan) to VirusTotal, by [searching for
// an already existing file hash](ref:file-info) or by other meanings when searching in [VT
// Enterprise services](ref:search).
// A file object ID is its SHA256 hash.
// Ref: #/components/schemas/FileObject
type FileObject struct {
	// List of representative tags related to the file's capabilities. Only available for Premium API
	// users.
	CapabilitiesTags []string `json:"capabilities_tags"`
	// Extracted when possible from the file's metadata. Indicates when it was built or compiled. It can
	// also be faked by malware creators. UTC timestamp.
	CreationDate int `json:"creation_date"`
	// True if the file can be downloaded, false otherwise. Only available for Premium API users.
	Downloadable bool `json:"downloadable"`
	// Date when the file was first seen in VirusTotal. UTC timestamp.
	FirstSubmissionDate int `json:"first_submission_date"`
	// Most recent scan date. UTC timestamp.
	LastAnalysisDate int `json:"last_analysis_date"`
	// Latest scan results. For more information about its format, check the [Analysis](#analyses-object)
	// object `results` attribute.
	LastAnalysisResults FileObjectLastAnalysisResults `json:"last_analysis_results"`
	// A summary of the latest scan results. For more information about its format, check the
	// [Analysis](#analyses-object) object `stats` attribute.
	LastAnalysisStats FileObjectLastAnalysisStats `json:"last_analysis_stats"`
	// Date when the object itself was last modified. UTC timestamp.
	LastModificationDate int `json:"last_modification_date"`
	// Most recent date the file was posted to VirusTotal. UTC timestamp.
	LastSubmissionDate int `json:"last_submission_date"`
	// Icon's relevant hashes, the dictionary contains two keys:.
	MainIcon FileObjectMainIcon `json:"main_icon"`
	// File's MD5 hash.
	MD5 string `json:"md5"`
	// The most interesting name out of all file's names.
	MeaningfulName string `json:"meaningful_name"`
	// All file names associated with the file.
	Names []string `json:"names"`
	// File's score calculated from all votes posted by the VirusTotal community. To know more about how
	// reputation is calculated, check [this article](https://support.virustotal.
	// com/hc/en-us/articles/115002146769-Vote-comment).
	Reputation int `json:"reputation"`
	// File's SHA1 hash.
	SHA1 string `json:"sha1"`
	// File's SHA256 hash.
	SHA256 string `json:"sha256"`
	// Dictionary containing the number of matched sigma rules group by its severity, same as
	// `sigma_analysis_stats` but split by ruleset. Dictionary key is the ruleset name and value is the
	// stats for that specific ruleset.
	SigmaAnalysisSummary FileObjectSigmaAnalysisSummary `json:"sigma_analysis_summary"`
	// File size in bytes.
	Size int `json:"size"`
	// List of representative attributes.
	Tags []string `json:"tags"`
	// Number of times the file has been posted to VirusTotal.
	TimesSubmitted int `json:"times_submitted"`
	// Unweighted number of total votes from the community, divided in "harmless" and "malicious":.
	TotalVotes FileObjectTotalVotes `json:"total_votes"`
	// Describes the file type.
	TypeDescription string `json:"type_description"`
	// Specifies file extension.
	TypeExtension string `json:"type_extension"`
	// Tag representing the file type. Can be used to filter by file type in [VirusTotal intelligence
	// searches](https://support.virustotal.com/hc/en-us/articles/360001387057).
	TypeTag string `json:"type_tag"`
	// Indicates from how many different sources the file has been posted from.
	UniqueSources int `json:"unique_sources"`
	// In-house similarity clustering algorithm value, based on a simple structural feature hash allows
	// you to find similar files.
	Vhash string `json:"vhash"`
}

// GetCapabilitiesTags returns the value of CapabilitiesTags.
func (s FileObject) GetCapabilitiesTags() []string {
	return s.CapabilitiesTags
}

// GetCreationDate returns the value of CreationDate.
func (s FileObject) GetCreationDate() int {
	return s.CreationDate
}

// GetDownloadable returns the value of Downloadable.
func (s FileObject) GetDownloadable() bool {
	return s.Downloadable
}

// GetFirstSubmissionDate returns the value of FirstSubmissionDate.
func (s FileObject) GetFirstSubmissionDate() int {
	return s.FirstSubmissionDate
}

// GetLastAnalysisDate returns the value of LastAnalysisDate.
func (s FileObject) GetLastAnalysisDate() int {
	return s.LastAnalysisDate
}

// GetLastAnalysisResults returns the value of LastAnalysisResults.
func (s FileObject) GetLastAnalysisResults() FileObjectLastAnalysisResults {
	return s.LastAnalysisResults
}

// GetLastAnalysisStats returns the value of LastAnalysisStats.
func (s FileObject) GetLastAnalysisStats() FileObjectLastAnalysisStats {
	return s.LastAnalysisStats
}

// GetLastModificationDate returns the value of LastModificationDate.
func (s FileObject) GetLastModificationDate() int {
	return s.LastModificationDate
}

// GetLastSubmissionDate returns the value of LastSubmissionDate.
func (s FileObject) GetLastSubmissionDate() int {
	return s.LastSubmissionDate
}

// GetMainIcon returns the value of MainIcon.
func (s FileObject) GetMainIcon() FileObjectMainIcon {
	return s.MainIcon
}

// GetMD5 returns the value of MD5.
func (s FileObject) GetMD5() string {
	return s.MD5
}

// GetMeaningfulName returns the value of MeaningfulName.
func (s FileObject) GetMeaningfulName() string {
	return s.MeaningfulName
}

// GetNames returns the value of Names.
func (s FileObject) GetNames() []string {
	return s.Names
}

// GetReputation returns the value of Reputation.
func (s FileObject) GetReputation() int {
	return s.Reputation
}

// GetSHA1 returns the value of SHA1.
func (s FileObject) GetSHA1() string {
	return s.SHA1
}

// GetSHA256 returns the value of SHA256.
func (s FileObject) GetSHA256() string {
	return s.SHA256
}

// GetSigmaAnalysisSummary returns the value of SigmaAnalysisSummary.
func (s FileObject) GetSigmaAnalysisSummary() FileObjectSigmaAnalysisSummary {
	return s.SigmaAnalysisSummary
}

// GetSize returns the value of Size.
func (s FileObject) GetSize() int {
	return s.Size
}

// GetTags returns the value of Tags.
func (s FileObject) GetTags() []string {
	return s.Tags
}

// GetTimesSubmitted returns the value of TimesSubmitted.
func (s FileObject) GetTimesSubmitted() int {
	return s.TimesSubmitted
}

// GetTotalVotes returns the value of TotalVotes.
func (s FileObject) GetTotalVotes() FileObjectTotalVotes {
	return s.TotalVotes
}

// GetTypeDescription returns the value of TypeDescription.
func (s FileObject) GetTypeDescription() string {
	return s.TypeDescription
}

// GetTypeExtension returns the value of TypeExtension.
func (s FileObject) GetTypeExtension() string {
	return s.TypeExtension
}

// GetTypeTag returns the value of TypeTag.
func (s FileObject) GetTypeTag() string {
	return s.TypeTag
}

// GetUniqueSources returns the value of UniqueSources.
func (s FileObject) GetUniqueSources() int {
	return s.UniqueSources
}

// GetVhash returns the value of Vhash.
func (s FileObject) GetVhash() string {
	return s.Vhash
}

// SetCapabilitiesTags sets the value of CapabilitiesTags.
func (s *FileObject) SetCapabilitiesTags(val []string) {
	s.CapabilitiesTags = val
}

// SetCreationDate sets the value of CreationDate.
func (s *FileObject) SetCreationDate(val int) {
	s.CreationDate = val
}

// SetDownloadable sets the value of Downloadable.
func (s *FileObject) SetDownloadable(val bool) {
	s.Downloadable = val
}

// SetFirstSubmissionDate sets the value of FirstSubmissionDate.
func (s *FileObject) SetFirstSubmissionDate(val int) {
	s.FirstSubmissionDate = val
}

// SetLastAnalysisDate sets the value of LastAnalysisDate.
func (s *FileObject) SetLastAnalysisDate(val int) {
	s.LastAnalysisDate = val
}

// SetLastAnalysisResults sets the value of LastAnalysisResults.
func (s *FileObject) SetLastAnalysisResults(val FileObjectLastAnalysisResults) {
	s.LastAnalysisResults = val
}

// SetLastAnalysisStats sets the value of LastAnalysisStats.
func (s *FileObject) SetLastAnalysisStats(val FileObjectLastAnalysisStats) {
	s.LastAnalysisStats = val
}

// SetLastModificationDate sets the value of LastModificationDate.
func (s *FileObject) SetLastModificationDate(val int) {
	s.LastModificationDate = val
}

// SetLastSubmissionDate sets the value of LastSubmissionDate.
func (s *FileObject) SetLastSubmissionDate(val int) {
	s.LastSubmissionDate = val
}

// SetMainIcon sets the value of MainIcon.
func (s *FileObject) SetMainIcon(val FileObjectMainIcon) {
	s.MainIcon = val
}

// SetMD5 sets the value of MD5.
func (s *FileObject) SetMD5(val string) {
	s.MD5 = val
}

// SetMeaningfulName sets the value of MeaningfulName.
func (s *FileObject) SetMeaningfulName(val string) {
	s.MeaningfulName = val
}

// SetNames sets the value of Names.
func (s *FileObject) SetNames(val []string) {
	s.Names = val
}

// SetReputation sets the value of Reputation.
func (s *FileObject) SetReputation(val int) {
	s.Reputation = val
}

// SetSHA1 sets the value of SHA1.
func (s *FileObject) SetSHA1(val string) {
	s.SHA1 = val
}

// SetSHA256 sets the value of SHA256.
func (s *FileObject) SetSHA256(val string) {
	s.SHA256 = val
}

// SetSigmaAnalysisSummary sets the value of SigmaAnalysisSummary.
func (s *FileObject) SetSigmaAnalysisSummary(val FileObjectSigmaAnalysisSummary) {
	s.SigmaAnalysisSummary = val
}

// SetSize sets the value of Size.
func (s *FileObject) SetSize(val int) {
	s.Size = val
}

// SetTags sets the value of Tags.
func (s *FileObject) SetTags(val []string) {
	s.Tags = val
}

// SetTimesSubmitted sets the value of TimesSubmitted.
func (s *FileObject) SetTimesSubmitted(val int) {
	s.TimesSubmitted = val
}

// SetTotalVotes sets the value of TotalVotes.
func (s *FileObject) SetTotalVotes(val FileObjectTotalVotes) {
	s.TotalVotes = val
}

// SetTypeDescription sets the value of TypeDescription.
func (s *FileObject) SetTypeDescription(val string) {
	s.TypeDescription = val
}

// SetTypeExtension sets the value of TypeExtension.
func (s *FileObject) SetTypeExtension(val string) {
	s.TypeExtension = val
}

// SetTypeTag sets the value of TypeTag.
func (s *FileObject) SetTypeTag(val string) {
	s.TypeTag = val
}

// SetUniqueSources sets the value of UniqueSources.
func (s *FileObject) SetUniqueSources(val int) {
	s.UniqueSources = val
}

// SetVhash sets the value of Vhash.
func (s *FileObject) SetVhash(val string) {
	s.Vhash = val
}

// Latest scan results. For more information about its format, check the [Analysis](#analyses-object)
// object `results` attribute.
type FileObjectLastAnalysisResults map[string]jx.Raw

func (s *FileObjectLastAnalysisResults) init() FileObjectLastAnalysisResults {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// A summary of the latest scan results. For more information about its format, check the
// [Analysis](#analyses-object) object `stats` attribute.
type FileObjectLastAnalysisStats map[string]jx.Raw

func (s *FileObjectLastAnalysisStats) init() FileObjectLastAnalysisStats {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Icon's relevant hashes, the dictionary contains two keys:.
type FileObjectMainIcon struct {
	// Icon's difference hash. It can be used to search for files with similar icons using the
	// [/intelligence/search](#intelligence-search) endpoint.
	Dhash string `json:"dhash"`
	// Icon's MD5 hash.
	RawMD5 string `json:"raw_md5"`
}

// GetDhash returns the value of Dhash.
func (s FileObjectMainIcon) GetDhash() string {
	return s.Dhash
}

// GetRawMD5 returns the value of RawMD5.
func (s FileObjectMainIcon) GetRawMD5() string {
	return s.RawMD5
}

// SetDhash sets the value of Dhash.
func (s *FileObjectMainIcon) SetDhash(val string) {
	s.Dhash = val
}

// SetRawMD5 sets the value of RawMD5.
func (s *FileObjectMainIcon) SetRawMD5(val string) {
	s.RawMD5 = val
}

// Dictionary containing the number of matched sigma rules group by its severity, same as
// `sigma_analysis_stats` but split by ruleset. Dictionary key is the ruleset name and value is the
// stats for that specific ruleset.
type FileObjectSigmaAnalysisSummary map[string]jx.Raw

func (s *FileObjectSigmaAnalysisSummary) init() FileObjectSigmaAnalysisSummary {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Unweighted number of total votes from the community, divided in "harmless" and "malicious":.
type FileObjectTotalVotes struct {
	// Number of positive votes.
	Harmless int `json:"harmless"`
	// Number of negative votes.
	Malicious int `json:"malicious"`
}

// GetHarmless returns the value of Harmless.
func (s FileObjectTotalVotes) GetHarmless() int {
	return s.Harmless
}

// GetMalicious returns the value of Malicious.
func (s FileObjectTotalVotes) GetMalicious() int {
	return s.Malicious
}

// SetHarmless sets the value of Harmless.
func (s *FileObjectTotalVotes) SetHarmless(val int) {
	s.Harmless = val
}

// SetMalicious sets the value of Malicious.
func (s *FileObjectTotalVotes) SetMalicious(val int) {
	s.Malicious = val
}

// NewOptFileInfoOKDataRelationships returns new OptFileInfoOKDataRelationships with value set to v.
func NewOptFileInfoOKDataRelationships(v FileInfoOKDataRelationships) OptFileInfoOKDataRelationships {
	return OptFileInfoOKDataRelationships{
		Value: v,
		Set:   true,
	}
}

// OptFileInfoOKDataRelationships is optional FileInfoOKDataRelationships.
type OptFileInfoOKDataRelationships struct {
	Value FileInfoOKDataRelationships
	Set   bool
}

// IsSet returns true if OptFileInfoOKDataRelationships was set.
func (o OptFileInfoOKDataRelationships) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFileInfoOKDataRelationships) Reset() {
	var v FileInfoOKDataRelationships
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFileInfoOKDataRelationships) SetTo(v FileInfoOKDataRelationships) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFileInfoOKDataRelationships) Get() (v FileInfoOKDataRelationships, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFileInfoOKDataRelationships) Or(d FileInfoOKDataRelationships) FileInfoOKDataRelationships {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURLInfoOKDataRelationships returns new OptURLInfoOKDataRelationships with value set to v.
func NewOptURLInfoOKDataRelationships(v URLInfoOKDataRelationships) OptURLInfoOKDataRelationships {
	return OptURLInfoOKDataRelationships{
		Value: v,
		Set:   true,
	}
}

// OptURLInfoOKDataRelationships is optional URLInfoOKDataRelationships.
type OptURLInfoOKDataRelationships struct {
	Value URLInfoOKDataRelationships
	Set   bool
}

// IsSet returns true if OptURLInfoOKDataRelationships was set.
func (o OptURLInfoOKDataRelationships) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURLInfoOKDataRelationships) Reset() {
	var v URLInfoOKDataRelationships
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURLInfoOKDataRelationships) SetTo(v URLInfoOKDataRelationships) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURLInfoOKDataRelationships) Get() (v URLInfoOKDataRelationships, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURLInfoOKDataRelationships) Or(d URLInfoOKDataRelationships) URLInfoOKDataRelationships {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type URLInfoBadRequest struct {
	Error Error `json:"error"`
}

// GetError returns the value of Error.
func (s URLInfoBadRequest) GetError() Error {
	return s.Error
}

// SetError sets the value of Error.
func (s *URLInfoBadRequest) SetError(val Error) {
	s.Error = val
}

func (*URLInfoBadRequest) uRLInfoRes() {}

type URLInfoOK struct {
	Data URLInfoOKData `json:"data"`
}

// GetData returns the value of Data.
func (s URLInfoOK) GetData() URLInfoOKData {
	return s.Data
}

// SetData sets the value of Data.
func (s *URLInfoOK) SetData(val URLInfoOKData) {
	s.Data = val
}

func (*URLInfoOK) uRLInfoRes() {}

type URLInfoOKData struct {
	Attributes URLObject `json:"attributes"`
	// Object ID.
	ID            string                        `json:"id"`
	Links         URLInfoOKDataLinks            `json:"links"`
	Relationships OptURLInfoOKDataRelationships `json:"relationships"`
	// Object type.
	Type URLInfoOKDataType `json:"type"`
}

// GetAttributes returns the value of Attributes.
func (s URLInfoOKData) GetAttributes() URLObject {
	return s.Attributes
}

// GetID returns the value of ID.
func (s URLInfoOKData) GetID() string {
	return s.ID
}

// GetLinks returns the value of Links.
func (s URLInfoOKData) GetLinks() URLInfoOKDataLinks {
	return s.Links
}

// GetRelationships returns the value of Relationships.
func (s URLInfoOKData) GetRelationships() OptURLInfoOKDataRelationships {
	return s.Relationships
}

// GetType returns the value of Type.
func (s URLInfoOKData) GetType() URLInfoOKDataType {
	return s.Type
}

// SetAttributes sets the value of Attributes.
func (s *URLInfoOKData) SetAttributes(val URLObject) {
	s.Attributes = val
}

// SetID sets the value of ID.
func (s *URLInfoOKData) SetID(val string) {
	s.ID = val
}

// SetLinks sets the value of Links.
func (s *URLInfoOKData) SetLinks(val URLInfoOKDataLinks) {
	s.Links = val
}

// SetRelationships sets the value of Relationships.
func (s *URLInfoOKData) SetRelationships(val OptURLInfoOKDataRelationships) {
	s.Relationships = val
}

// SetType sets the value of Type.
func (s *URLInfoOKData) SetType(val URLInfoOKDataType) {
	s.Type = val
}

type URLInfoOKDataLinks struct {
	// Link to the object.
	Self            string `json:"self"`
	AdditionalProps URLInfoOKDataLinksAdditional
}

// GetSelf returns the value of Self.
func (s URLInfoOKDataLinks) GetSelf() string {
	return s.Self
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s URLInfoOKDataLinks) GetAdditionalProps() URLInfoOKDataLinksAdditional {
	return s.AdditionalProps
}

// SetSelf sets the value of Self.
func (s *URLInfoOKDataLinks) SetSelf(val string) {
	s.Self = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *URLInfoOKDataLinks) SetAdditionalProps(val URLInfoOKDataLinksAdditional) {
	s.AdditionalProps = val
}

type URLInfoOKDataLinksAdditional map[string]jx.Raw

func (s *URLInfoOKDataLinksAdditional) init() URLInfoOKDataLinksAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type URLInfoOKDataRelationships map[string]jx.Raw

func (s *URLInfoOKDataRelationships) init() URLInfoOKDataRelationships {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Object type.
type URLInfoOKDataType string

const (
	URLInfoOKDataTypeURL URLInfoOKDataType = "url"
)

// URLs doesn't only represent information by themselves, but also can give
// contextual information about files and other elements on VT.
// Different URL calls may return different URL-related objects that we list here.
// Ref: #/components/schemas/URLObject
type URLObject struct {
	// They key is the partner who categorised the URL and the value is the URL's category according to
	// that partner.
	Categories URLObjectCategories `json:"categories"`
	// Dictionary including difference hash and md5 hash of the URL's favicon. Only returned in premium
	// API.
	Favicon URLObjectFavicon `json:"favicon"`
	// UTC timestamp of the date where the URL was first submitted to VirusTotal.
	FirstSubmissionDate int `json:"first_submission_date"`
	// Containing all meta tags (only for URLs downloading a HTML). Keys are the meta tag name and value
	// is a list containing all values of that meta tag.
	HTMLMeta URLObjectHTMLMeta `json:"html_meta"`
	// UTC timestamp representing last time the URL was scanned.
	LastAnalysisDate int `json:"last_analysis_date"`
	// Result from URL scanners. dict with scanner name as key and a dict with notes/result from that
	// scanner as value.
	LastAnalysisResults URLObjectLastAnalysisResults `json:"last_analysis_results"`
	// Number of different results from this scans.
	LastAnalysisStats URLObjectLastAnalysisStats `json:"last_analysis_stats"`
	// If the original URL redirects, where does it end.
	LastFinalURL string `json:"last_final_url"`
	// HTTP response code of the last response.
	LastHTTPResponseCode int `json:"last_http_response_code"`
	// Length in bytes of the content received.
	LastHTTPResponseContentLength int `json:"last_http_response_content_length"`
	// URL response body's SHA256 hash.
	LastHTTPResponseContentSHA256 string `json:"last_http_response_content_sha256"`
	// Containing the website's cookies.
	LastHTTPResponseCookies URLObjectLastHTTPResponseCookies `json:"last_http_response_cookies"`
	// Containing headers and values of last HTTP response.
	LastHTTPResponseHeaders URLObjectLastHTTPResponseHeaders `json:"last_http_response_headers"`
	// UTC timestamp representing last modification date.
	LastModificationDate int `json:"last_modification_date"`
	// UTC timestamp representing last time it was sent to be analysed.
	LastSubmissionDate int `json:"last_submission_date"`
	// Containing links to different domains.
	OutgoingLinks []string `json:"outgoing_links"`
	// History of redirections followed when visiting a given URL. The last URL of the chain is not
	// included in the list since it is available at the `last_final_url` attribute.
	RedirectionChain []string `json:"redirection_chain"`
	// Value of votes from VT community.
	Reputation int `json:"reputation"`
	// Tags.
	Tags []string `json:"tags"`
	// Targeted brand info extracted from phishing engines.
	TargetedBrand URLObjectTargetedBrand `json:"targeted_brand"`
	// Number of times that URL has been checked.
	TimesSubmitted int `json:"times_submitted"`
	// Webpage title.
	Title string `json:"title"`
	// Containing the number of positive ("harmless") and negative ("malicious") votes received from VT
	// community.
	TotalVotes URLObjectTotalVotes `json:"total_votes"`
	// Contains all found trackers in that URL in a historical manner. Every key is a tracker name, which
	// is a dictionary containing:.
	Trackers URLObjectTrackers `json:"trackers"`
	// Original URL to be scanned.
	URL string `json:"url"`
}

// GetCategories returns the value of Categories.
func (s URLObject) GetCategories() URLObjectCategories {
	return s.Categories
}

// GetFavicon returns the value of Favicon.
func (s URLObject) GetFavicon() URLObjectFavicon {
	return s.Favicon
}

// GetFirstSubmissionDate returns the value of FirstSubmissionDate.
func (s URLObject) GetFirstSubmissionDate() int {
	return s.FirstSubmissionDate
}

// GetHTMLMeta returns the value of HTMLMeta.
func (s URLObject) GetHTMLMeta() URLObjectHTMLMeta {
	return s.HTMLMeta
}

// GetLastAnalysisDate returns the value of LastAnalysisDate.
func (s URLObject) GetLastAnalysisDate() int {
	return s.LastAnalysisDate
}

// GetLastAnalysisResults returns the value of LastAnalysisResults.
func (s URLObject) GetLastAnalysisResults() URLObjectLastAnalysisResults {
	return s.LastAnalysisResults
}

// GetLastAnalysisStats returns the value of LastAnalysisStats.
func (s URLObject) GetLastAnalysisStats() URLObjectLastAnalysisStats {
	return s.LastAnalysisStats
}

// GetLastFinalURL returns the value of LastFinalURL.
func (s URLObject) GetLastFinalURL() string {
	return s.LastFinalURL
}

// GetLastHTTPResponseCode returns the value of LastHTTPResponseCode.
func (s URLObject) GetLastHTTPResponseCode() int {
	return s.LastHTTPResponseCode
}

// GetLastHTTPResponseContentLength returns the value of LastHTTPResponseContentLength.
func (s URLObject) GetLastHTTPResponseContentLength() int {
	return s.LastHTTPResponseContentLength
}

// GetLastHTTPResponseContentSHA256 returns the value of LastHTTPResponseContentSHA256.
func (s URLObject) GetLastHTTPResponseContentSHA256() string {
	return s.LastHTTPResponseContentSHA256
}

// GetLastHTTPResponseCookies returns the value of LastHTTPResponseCookies.
func (s URLObject) GetLastHTTPResponseCookies() URLObjectLastHTTPResponseCookies {
	return s.LastHTTPResponseCookies
}

// GetLastHTTPResponseHeaders returns the value of LastHTTPResponseHeaders.
func (s URLObject) GetLastHTTPResponseHeaders() URLObjectLastHTTPResponseHeaders {
	return s.LastHTTPResponseHeaders
}

// GetLastModificationDate returns the value of LastModificationDate.
func (s URLObject) GetLastModificationDate() int {
	return s.LastModificationDate
}

// GetLastSubmissionDate returns the value of LastSubmissionDate.
func (s URLObject) GetLastSubmissionDate() int {
	return s.LastSubmissionDate
}

// GetOutgoingLinks returns the value of OutgoingLinks.
func (s URLObject) GetOutgoingLinks() []string {
	return s.OutgoingLinks
}

// GetRedirectionChain returns the value of RedirectionChain.
func (s URLObject) GetRedirectionChain() []string {
	return s.RedirectionChain
}

// GetReputation returns the value of Reputation.
func (s URLObject) GetReputation() int {
	return s.Reputation
}

// GetTags returns the value of Tags.
func (s URLObject) GetTags() []string {
	return s.Tags
}

// GetTargetedBrand returns the value of TargetedBrand.
func (s URLObject) GetTargetedBrand() URLObjectTargetedBrand {
	return s.TargetedBrand
}

// GetTimesSubmitted returns the value of TimesSubmitted.
func (s URLObject) GetTimesSubmitted() int {
	return s.TimesSubmitted
}

// GetTitle returns the value of Title.
func (s URLObject) GetTitle() string {
	return s.Title
}

// GetTotalVotes returns the value of TotalVotes.
func (s URLObject) GetTotalVotes() URLObjectTotalVotes {
	return s.TotalVotes
}

// GetTrackers returns the value of Trackers.
func (s URLObject) GetTrackers() URLObjectTrackers {
	return s.Trackers
}

// GetURL returns the value of URL.
func (s URLObject) GetURL() string {
	return s.URL
}

// SetCategories sets the value of Categories.
func (s *URLObject) SetCategories(val URLObjectCategories) {
	s.Categories = val
}

// SetFavicon sets the value of Favicon.
func (s *URLObject) SetFavicon(val URLObjectFavicon) {
	s.Favicon = val
}

// SetFirstSubmissionDate sets the value of FirstSubmissionDate.
func (s *URLObject) SetFirstSubmissionDate(val int) {
	s.FirstSubmissionDate = val
}

// SetHTMLMeta sets the value of HTMLMeta.
func (s *URLObject) SetHTMLMeta(val URLObjectHTMLMeta) {
	s.HTMLMeta = val
}

// SetLastAnalysisDate sets the value of LastAnalysisDate.
func (s *URLObject) SetLastAnalysisDate(val int) {
	s.LastAnalysisDate = val
}

// SetLastAnalysisResults sets the value of LastAnalysisResults.
func (s *URLObject) SetLastAnalysisResults(val URLObjectLastAnalysisResults) {
	s.LastAnalysisResults = val
}

// SetLastAnalysisStats sets the value of LastAnalysisStats.
func (s *URLObject) SetLastAnalysisStats(val URLObjectLastAnalysisStats) {
	s.LastAnalysisStats = val
}

// SetLastFinalURL sets the value of LastFinalURL.
func (s *URLObject) SetLastFinalURL(val string) {
	s.LastFinalURL = val
}

// SetLastHTTPResponseCode sets the value of LastHTTPResponseCode.
func (s *URLObject) SetLastHTTPResponseCode(val int) {
	s.LastHTTPResponseCode = val
}

// SetLastHTTPResponseContentLength sets the value of LastHTTPResponseContentLength.
func (s *URLObject) SetLastHTTPResponseContentLength(val int) {
	s.LastHTTPResponseContentLength = val
}

// SetLastHTTPResponseContentSHA256 sets the value of LastHTTPResponseContentSHA256.
func (s *URLObject) SetLastHTTPResponseContentSHA256(val string) {
	s.LastHTTPResponseContentSHA256 = val
}

// SetLastHTTPResponseCookies sets the value of LastHTTPResponseCookies.
func (s *URLObject) SetLastHTTPResponseCookies(val URLObjectLastHTTPResponseCookies) {
	s.LastHTTPResponseCookies = val
}

// SetLastHTTPResponseHeaders sets the value of LastHTTPResponseHeaders.
func (s *URLObject) SetLastHTTPResponseHeaders(val URLObjectLastHTTPResponseHeaders) {
	s.LastHTTPResponseHeaders = val
}

// SetLastModificationDate sets the value of LastModificationDate.
func (s *URLObject) SetLastModificationDate(val int) {
	s.LastModificationDate = val
}

// SetLastSubmissionDate sets the value of LastSubmissionDate.
func (s *URLObject) SetLastSubmissionDate(val int) {
	s.LastSubmissionDate = val
}

// SetOutgoingLinks sets the value of OutgoingLinks.
func (s *URLObject) SetOutgoingLinks(val []string) {
	s.OutgoingLinks = val
}

// SetRedirectionChain sets the value of RedirectionChain.
func (s *URLObject) SetRedirectionChain(val []string) {
	s.RedirectionChain = val
}

// SetReputation sets the value of Reputation.
func (s *URLObject) SetReputation(val int) {
	s.Reputation = val
}

// SetTags sets the value of Tags.
func (s *URLObject) SetTags(val []string) {
	s.Tags = val
}

// SetTargetedBrand sets the value of TargetedBrand.
func (s *URLObject) SetTargetedBrand(val URLObjectTargetedBrand) {
	s.TargetedBrand = val
}

// SetTimesSubmitted sets the value of TimesSubmitted.
func (s *URLObject) SetTimesSubmitted(val int) {
	s.TimesSubmitted = val
}

// SetTitle sets the value of Title.
func (s *URLObject) SetTitle(val string) {
	s.Title = val
}

// SetTotalVotes sets the value of TotalVotes.
func (s *URLObject) SetTotalVotes(val URLObjectTotalVotes) {
	s.TotalVotes = val
}

// SetTrackers sets the value of Trackers.
func (s *URLObject) SetTrackers(val URLObjectTrackers) {
	s.Trackers = val
}

// SetURL sets the value of URL.
func (s *URLObject) SetURL(val string) {
	s.URL = val
}

// They key is the partner who categorised the URL and the value is the URL's category according to
// that partner.
type URLObjectCategories map[string]jx.Raw

func (s *URLObjectCategories) init() URLObjectCategories {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Dictionary including difference hash and md5 hash of the URL's favicon. Only returned in premium
// API.
type URLObjectFavicon struct {
	// Difference hash.
	Dhash string `json:"dhash"`
	// Favicon's MD5 hash.
	RawMD5 string `json:"raw_md5"`
}

// GetDhash returns the value of Dhash.
func (s URLObjectFavicon) GetDhash() string {
	return s.Dhash
}

// GetRawMD5 returns the value of RawMD5.
func (s URLObjectFavicon) GetRawMD5() string {
	return s.RawMD5
}

// SetDhash sets the value of Dhash.
func (s *URLObjectFavicon) SetDhash(val string) {
	s.Dhash = val
}

// SetRawMD5 sets the value of RawMD5.
func (s *URLObjectFavicon) SetRawMD5(val string) {
	s.RawMD5 = val
}

// Containing all meta tags (only for URLs downloading a HTML). Keys are the meta tag name and value
// is a list containing all values of that meta tag.
type URLObjectHTMLMeta map[string]jx.Raw

func (s *URLObjectHTMLMeta) init() URLObjectHTMLMeta {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Result from URL scanners. dict with scanner name as key and a dict with notes/result from that
// scanner as value.
type URLObjectLastAnalysisResults struct {
	// Normalized result. can be:
	// * `harmless` - (site is not malicious),
	// * `undetected` - (scanner has no opinion about this site),
	// * `suspicious` - (scanner thinks the site is suspicious),
	// * `malicious` - (scanner thinks the site is malicious).
	Category URLObjectLastAnalysisResultsCategory `json:"category"`
	// Complete name of the URL scanning service.
	EngineName string `json:"engine_name"`
	// Type of service given by that URL scanning service (i.e. "blacklist").
	Method string `json:"method"`
	// Raw value returned by the URL scanner ("clean", "malicious", "suspicious", "phishing"). It may
	// vary from scanner to scanner, hence the need for the "category" field for normalisation.
	Result string `json:"result"`
}

// GetCategory returns the value of Category.
func (s URLObjectLastAnalysisResults) GetCategory() URLObjectLastAnalysisResultsCategory {
	return s.Category
}

// GetEngineName returns the value of EngineName.
func (s URLObjectLastAnalysisResults) GetEngineName() string {
	return s.EngineName
}

// GetMethod returns the value of Method.
func (s URLObjectLastAnalysisResults) GetMethod() string {
	return s.Method
}

// GetResult returns the value of Result.
func (s URLObjectLastAnalysisResults) GetResult() string {
	return s.Result
}

// SetCategory sets the value of Category.
func (s *URLObjectLastAnalysisResults) SetCategory(val URLObjectLastAnalysisResultsCategory) {
	s.Category = val
}

// SetEngineName sets the value of EngineName.
func (s *URLObjectLastAnalysisResults) SetEngineName(val string) {
	s.EngineName = val
}

// SetMethod sets the value of Method.
func (s *URLObjectLastAnalysisResults) SetMethod(val string) {
	s.Method = val
}

// SetResult sets the value of Result.
func (s *URLObjectLastAnalysisResults) SetResult(val string) {
	s.Result = val
}

// Normalized result. can be:
// * `harmless` - (site is not malicious),
// * `undetected` - (scanner has no opinion about this site),
// * `suspicious` - (scanner thinks the site is suspicious),
// * `malicious` - (scanner thinks the site is malicious).
type URLObjectLastAnalysisResultsCategory string

const (
	URLObjectLastAnalysisResultsCategoryHarmless   URLObjectLastAnalysisResultsCategory = "harmless"
	URLObjectLastAnalysisResultsCategoryUndetected URLObjectLastAnalysisResultsCategory = "undetected"
	URLObjectLastAnalysisResultsCategorySuspicious URLObjectLastAnalysisResultsCategory = "suspicious"
	URLObjectLastAnalysisResultsCategoryMalicious  URLObjectLastAnalysisResultsCategory = "malicious"
)

// Number of different results from this scans.
type URLObjectLastAnalysisStats struct {
	// Number of reports saying that is harmless.
	Harmless int `json:"harmless"`
	// Number of reports saying that is malicious.
	Malicious int `json:"malicious"`
	// Number of reports saying that is suspicious.
	Suspicious int `json:"suspicious"`
	// Number of timeouts when checking this URL.
	Timeout int `json:"timeout"`
	// Number of reports saying that is undetected.
	Undetected int `json:"undetected"`
}

// GetHarmless returns the value of Harmless.
func (s URLObjectLastAnalysisStats) GetHarmless() int {
	return s.Harmless
}

// GetMalicious returns the value of Malicious.
func (s URLObjectLastAnalysisStats) GetMalicious() int {
	return s.Malicious
}

// GetSuspicious returns the value of Suspicious.
func (s URLObjectLastAnalysisStats) GetSuspicious() int {
	return s.Suspicious
}

// GetTimeout returns the value of Timeout.
func (s URLObjectLastAnalysisStats) GetTimeout() int {
	return s.Timeout
}

// GetUndetected returns the value of Undetected.
func (s URLObjectLastAnalysisStats) GetUndetected() int {
	return s.Undetected
}

// SetHarmless sets the value of Harmless.
func (s *URLObjectLastAnalysisStats) SetHarmless(val int) {
	s.Harmless = val
}

// SetMalicious sets the value of Malicious.
func (s *URLObjectLastAnalysisStats) SetMalicious(val int) {
	s.Malicious = val
}

// SetSuspicious sets the value of Suspicious.
func (s *URLObjectLastAnalysisStats) SetSuspicious(val int) {
	s.Suspicious = val
}

// SetTimeout sets the value of Timeout.
func (s *URLObjectLastAnalysisStats) SetTimeout(val int) {
	s.Timeout = val
}

// SetUndetected sets the value of Undetected.
func (s *URLObjectLastAnalysisStats) SetUndetected(val int) {
	s.Undetected = val
}

// Containing the website's cookies.
type URLObjectLastHTTPResponseCookies map[string]jx.Raw

func (s *URLObjectLastHTTPResponseCookies) init() URLObjectLastHTTPResponseCookies {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Containing headers and values of last HTTP response.
type URLObjectLastHTTPResponseHeaders map[string]jx.Raw

func (s *URLObjectLastHTTPResponseHeaders) init() URLObjectLastHTTPResponseHeaders {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Targeted brand info extracted from phishing engines.
type URLObjectTargetedBrand map[string]jx.Raw

func (s *URLObjectTargetedBrand) init() URLObjectTargetedBrand {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Containing the number of positive ("harmless") and negative ("malicious") votes received from VT
// community.
type URLObjectTotalVotes struct {
	// Number of positive votes.
	Harmless int `json:"harmless"`
	// Number of negative votes.
	Malicious int `json:"malicious"`
}

// GetHarmless returns the value of Harmless.
func (s URLObjectTotalVotes) GetHarmless() int {
	return s.Harmless
}

// GetMalicious returns the value of Malicious.
func (s URLObjectTotalVotes) GetMalicious() int {
	return s.Malicious
}

// SetHarmless sets the value of Harmless.
func (s *URLObjectTotalVotes) SetHarmless(val int) {
	s.Harmless = val
}

// SetMalicious sets the value of Malicious.
func (s *URLObjectTotalVotes) SetMalicious(val int) {
	s.Malicious = val
}

// Contains all found trackers in that URL in a historical manner. Every key is a tracker name, which
// is a dictionary containing:.
type URLObjectTrackers struct {
	// Tracker ID, if available.
	ID string `json:"id"`
	// Tracker ingestion date as UNIX timestamp.
	Timestamp int `json:"timestamp"`
	// Tracker script URL.
	URL string `json:"url"`
}

// GetID returns the value of ID.
func (s URLObjectTrackers) GetID() string {
	return s.ID
}

// GetTimestamp returns the value of Timestamp.
func (s URLObjectTrackers) GetTimestamp() int {
	return s.Timestamp
}

// GetURL returns the value of URL.
func (s URLObjectTrackers) GetURL() string {
	return s.URL
}

// SetID sets the value of ID.
func (s *URLObjectTrackers) SetID(val string) {
	s.ID = val
}

// SetTimestamp sets the value of Timestamp.
func (s *URLObjectTrackers) SetTimestamp(val int) {
	s.Timestamp = val
}

// SetURL sets the value of URL.
func (s *URLObjectTrackers) SetURL(val string) {
	s.URL = val
}
