// Code generated by ogen, DO NOT EDIT.

package ovt

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s Error) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Code.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "code",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ErrorCode) Validate() error {
	switch s {
	case "BadRequestError":
		return nil
	case "WrongCredentialsError":
		return nil
	case "AuthenticationRequiredError":
		return nil
	case "TooManyRequestsError":
		return nil
	case "ForbiddenError":
		return nil
	case "NotFoundError":
		return nil
	case "QuotaExceededError":
		return nil
	case "UserNotActiveError":
		return nil
	case "InvalidArgumentError":
		return nil
	case "AlreadyExistsError":
		return nil
	case "TransientError":
		return nil
	case "UnselectiveContentQueryError":
		return nil
	case "UnsupportedContentQueryError":
		return nil
	case "NotAvailableYet":
		return nil
	case "FailedDependencyError":
		return nil
	case "DeadlineExceededError":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ScanURLBadRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Error.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s ScanURLOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Data.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s URLInfoBadRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Error.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s URLInfoOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Data.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s URLObject) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.LastAnalysisResults.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "last_analysis_results",
			Error: err,
		})
	}
	if err := func() error {
		if s.OutgoingLinks == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "outgoing_links",
			Error: err,
		})
	}
	if err := func() error {
		if s.RedirectionChain == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "redirection_chain",
			Error: err,
		})
	}
	if err := func() error {
		if s.Tags == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s URLObjectLastAnalysisResults) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if s.Category.Set {
			if err := func() error {
				if err := s.Category.Value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "category",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s URLObjectLastAnalysisResultsCategory) Validate() error {
	switch s {
	case "harmless":
		return nil
	case "undetected":
		return nil
	case "suspicious":
		return nil
	case "malicious":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s UrlsAnalyseBadRequest) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Error.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "error",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s UrlsAnalyseOK) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Data.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "data",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
